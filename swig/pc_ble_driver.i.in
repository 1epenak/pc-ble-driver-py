/*
 * Copyright (c) 2016 Nordic Semiconductor ASA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 *   3. Neither the name of Nordic Semiconductor ASA nor the names of other
 *   contributors to this software may be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 *   4. This software must only be used in or with a processor manufactured by Nordic
 *   Semiconductor ASA, or in or with a processor manufactured by a third party that
 *   is used in combination with a processor manufactured by Nordic Semiconductor.
 *
 *   5. Any software provided in binary or object form under this license must not be
 *   reverse engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%module @SWIG_MODULE_NAME@

%include "stdint.i"
%include "carrays.i"
%include "cpointer.i"

// Includes used in this transformation
%{
#include "sd_rpc.h"
#include "stdio.h"

#ifdef DEBUG
#include <pthread.h>
#endif // DEBUG

%}

// Requires special handling
%ignore sd_rpc_open;

// Ignore L2CAP APIs that will be replaced by L2CAP CoCs
%ignore sd_ble_l2cap_cid_register;
%ignore sd_ble_l2cap_cid_unregister;
%ignore sd_ble_l2cap_tx;
%ignore sd_ble_l2cap_ch_setup;
%ignore sd_ble_l2cap_ch_release;
%ignore sd_ble_l2cap_ch_rx;
%ignore sd_ble_l2cap_ch_tx;
%ignore sd_ble_l2cap_ch_flow_control;
// Ignore event getter, handled by the connectivity device
%ignore sd_ble_evt_get;

// Workaround for bug in SWIG, see https://github.com/swig/swig/issues/1305
%inline %{
#if NRF_SD_BLE_API_VERSION == 5
    // SoftDevice V5

    // ble.h
    // Forward declaration of structs
    typedef struct ble_evt_user_mem_request_t ble_evt_user_mem_request_t;
    typedef struct ble_gap_conn_cfg_t ble_gap_conn_cfg_t;
    typedef struct ble_gattc_conn_cfg_t ble_gattc_conn_cfg_t;
    typedef struct ble_gatt_conn_cfg_t ble_gatt_conn_cfg_t;
    typedef struct ble_l2cap_conn_cfg_t ble_l2cap_conn_cfg_t;

    typedef struct
    {
      uint16_t conn_handle;                                 /**< Connection Handle on which this event occurred. */
      union
      {
        ble_evt_user_mem_request_t      user_mem_request;    /**< User Memory Request Event Parameters. */
        ble_evt_user_mem_release_t      user_mem_release;    /**< User Memory Release Event Parameters. */
      } params;                                              /**< Event parameter union. */
    } ble_common_evt_t;

    typedef struct
    {
      uint8_t              conn_cfg_tag;        /**< The application chosen tag it can use with the @ref sd_ble_gap_adv_start() and @ref sd_ble_gap_connect()
                                                     calls to select this configuration when creating a connection.
                                                     Must be different for all connection configurations added and not @ref BLE_CONN_CFG_TAG_DEFAULT. */
      union
      {
        ble_gap_conn_cfg_t   gap_conn_cfg;      /**< GAP connection configuration, cfg_id is @ref BLE_CONN_CFG_GAP. */
        ble_gattc_conn_cfg_t gattc_conn_cfg;    /**< GATTC connection configuration, cfg_id is @ref BLE_CONN_CFG_GATTC. */
        ble_gatts_conn_cfg_t gatts_conn_cfg;    /**< GATTS connection configuration, cfg_id is @ref BLE_CONN_CFG_GATTS. */
        ble_gatt_conn_cfg_t  gatt_conn_cfg;     /**< GATT connection configuration, cfg_id is @ref BLE_CONN_CFG_GATT. */
        ble_l2cap_conn_cfg_t l2cap_conn_cfg;    /**< L2CAP connection configuration, cfg_id is @ref BLE_CONN_CFG_L2CAP. */
      } params;                                 /**< Connection configuration union. */
    } ble_conn_cfg_t;

    // ble_gap.h
    // Forward declaration of structs
    typedef struct ble_gap_evt_connected_t ble_gap_evt_connected_t;
    typedef struct ble_gap_evt_disconnected_t ble_gap_evt_disconnected_t;
    typedef struct ble_gap_evt_conn_param_update_t ble_gap_evt_conn_param_update_t;
    typedef struct ble_gap_evt_sec_params_request_t ble_gap_evt_sec_params_request_t;
    typedef struct ble_gap_evt_sec_info_request_t ble_gap_evt_sec_info_request_t;
    typedef struct ble_gap_evt_passkey_display_t ble_gap_evt_passkey_display_t;
    typedef struct ble_gap_evt_key_pressed_t ble_gap_evt_key_pressed_t;
    typedef struct ble_gap_evt_auth_key_request_t ble_gap_evt_auth_key_request_t;
    typedef struct ble_gap_evt_lesc_dhkey_request_t ble_gap_evt_lesc_dhkey_request_t;
    typedef struct ble_gap_evt_auth_status_t ble_gap_evt_auth_status_t;
    typedef struct ble_gap_evt_conn_sec_update_t ble_gap_evt_conn_sec_update_t;
    typedef struct ble_gap_evt_timeout_t ble_gap_evt_timeout_t;
    typedef struct ble_gap_evt_rssi_changed_t ble_gap_evt_rssi_changed_t;
    typedef struct ble_gap_evt_adv_report_t ble_gap_evt_adv_report_t;
    typedef struct ble_gap_evt_sec_request_t ble_gap_evt_sec_request_t;
    typedef struct ble_gap_evt_conn_param_update_request_t ble_gap_evt_conn_param_update_request_t;
    typedef struct ble_gap_evt_scan_req_report_t ble_gap_evt_scan_req_report_t;
    typedef struct ble_gap_evt_phy_update_request_t ble_gap_evt_phy_update_request_t;
    typedef struct ble_gap_evt_phy_update_t ble_gap_evt_phy_update_t;
    typedef struct ble_gap_evt_data_length_update_request_t ble_gap_evt_data_length_update_request_t;
    typedef struct ble_gap_evt_data_length_update_t ble_gap_evt_data_length_update_t;

    // From ble_gap.h
    typedef struct
    {
      uint16_t conn_handle;                                     /**< Connection Handle on which event occurred. */
      union                                /**< union alternative identified by evt_id in enclosing struct. */
      {
        ble_gap_evt_connected_t                   connected;                    /**< Connected Event Parameters. */
        ble_gap_evt_disconnected_t                disconnected;                 /**< Disconnected Event Parameters. */
        ble_gap_evt_conn_param_update_t           conn_param_update;            /**< Connection Parameter Update Parameters. */
        ble_gap_evt_sec_params_request_t          sec_params_request;           /**< Security Parameters Request Event Parameters. */
        ble_gap_evt_sec_info_request_t            sec_info_request;             /**< Security Information Request Event Parameters. */
        ble_gap_evt_passkey_display_t             passkey_display;              /**< Passkey Display Event Parameters. */
        ble_gap_evt_key_pressed_t                 key_pressed;                  /**< Key Pressed Event Parameters. */
        ble_gap_evt_auth_key_request_t            auth_key_request;             /**< Authentication Key Request Event Parameters. */
        ble_gap_evt_lesc_dhkey_request_t          lesc_dhkey_request;           /**< LE Secure Connections DHKey calculation request. */
        ble_gap_evt_auth_status_t                 auth_status;                  /**< Authentication Status Event Parameters. */
        ble_gap_evt_conn_sec_update_t             conn_sec_update;              /**< Connection Security Update Event Parameters. */
        ble_gap_evt_timeout_t                     timeout;                      /**< Timeout Event Parameters. */
        ble_gap_evt_rssi_changed_t                rssi_changed;                 /**< RSSI Event Parameters. */
        ble_gap_evt_adv_report_t                  adv_report;                   /**< Advertising Report Event Parameters. */
        ble_gap_evt_sec_request_t                 sec_request;                  /**< Security Request Event Parameters. */
        ble_gap_evt_conn_param_update_request_t   conn_param_update_request;    /**< Connection Parameter Update Parameters. */
        ble_gap_evt_scan_req_report_t             scan_req_report;              /**< Scan Request Report Parameters. */
        ble_gap_evt_phy_update_request_t          phy_update_request;           /**< PHY Update Request Event Parameters. */
        ble_gap_evt_phy_update_t                  phy_update;                   /**< PHY Update Parameters. */
        ble_gap_evt_data_length_update_request_t  data_length_update_request;   /**< Data Length Update Request Event Parameters. */
        ble_gap_evt_data_length_update_t          data_length_update;           /**< Data Length Update Event Parameters. */
      } params;                                                                 /**< Event Parameters. */
    } ble_gap_evt_t;

    // ble_gatts.h
    // Forward declaration of structs
    typedef struct ble_gatts_authorize_params_t ble_gatts_authorize_params_t;
    typedef struct ble_gatts_evt_write_t ble_gatts_evt_write_t;
    typedef struct ble_gatts_evt_rw_authorize_request_t ble_gatts_evt_rw_authorize_request_t;
    typedef struct ble_gatts_evt_sys_attr_missing_t ble_gatts_evt_sys_attr_missing_t;
    typedef struct ble_gatts_evt_hvc_t ble_gatts_evt_hvc_t;
    typedef struct ble_gatts_evt_timeout_t ble_gatts_evt_timeout_t;

    // From ble_gatts.h
    typedef struct
    {
      uint8_t                               type;   /**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. */
      union
      {
        ble_gatts_authorize_params_t        read;   /**< Read authorization parameters. */
        ble_gatts_authorize_params_t        write;  /**< Write authorization parameters. */
      } params;                                     /**< Reply Parameters. */
    } ble_gatts_rw_authorize_reply_params_t;

    typedef struct
    {
      uint16_t conn_handle;                                       /**< Connection Handle on which the event occurred. */
      union
      {
        ble_gatts_evt_write_t                 write;              /**< Write Event Parameters. */
        ble_gatts_evt_rw_authorize_request_t  authorize_request;  /**< Read or Write Authorize Request Parameters. */
        ble_gatts_evt_sys_attr_missing_t      sys_attr_missing;   /**< System attributes missing. */
        ble_gatts_evt_hvc_t                   hvc;                /**< Handle Value Confirmation Event Parameters. */
        ble_gatts_evt_timeout_t               timeout;            /**< Timeout Event. */
      } params;                                                   /**< Event Parameters. */
    } ble_gatts_evt_t;

    // ble_gattc.h
    // Forward declaration of structs
    typedef struct ble_gattc_evt_prim_srvc_disc_rsp_t ble_gattc_evt_prim_srvc_disc_rsp_t;
    typedef struct ble_gattc_evt_rel_disc_rsp_t ble_gattc_evt_rel_disc_rsp_t;
    typedef struct ble_gattc_evt_char_disc_rsp_t ble_gattc_evt_char_disc_rsp_t;
    typedef struct ble_gattc_evt_desc_disc_rsp_t ble_gattc_evt_desc_disc_rsp_t;
    typedef struct ble_gattc_evt_char_val_by_uuid_read_rsp_t ble_gattc_evt_char_val_by_uuid_read_rsp_t;
    typedef struct ble_gattc_evt_read_rsp_t ble_gattc_evt_read_rsp_t;
    typedef struct ble_gattc_evt_char_vals_read_rsp_t ble_gattc_evt_char_vals_read_rsp_t;
    typedef struct ble_gattc_evt_write_rsp_t ble_gattc_evt_write_rsp_t;
    typedef struct ble_gattc_evt_hvx_t ble_gattc_evt_hvx_t;
    typedef struct ble_gattc_evt_timeout_t ble_gattc_evt_timeout_t;
    typedef struct ble_gattc_evt_attr_info_disc_rsp_t ble_gattc_evt_attr_info_disc_rsp_t;

    // From ble_gattc.h
    typedef struct
    {
      uint16_t            conn_handle;                /**< Connection Handle on which event occured. */
      uint16_t            gatt_status;                /**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. */
      uint16_t            error_handle;               /**< In case of error: The handle causing the error. In all other cases @ref BLE_GATT_HANDLE_INVALID. */
      union
      {
        ble_gattc_evt_prim_srvc_disc_rsp_t          prim_srvc_disc_rsp;         /**< Primary Service Discovery Response Event Parameters. */
        ble_gattc_evt_rel_disc_rsp_t                rel_disc_rsp;               /**< Relationship Discovery Response Event Parameters. */
        ble_gattc_evt_char_disc_rsp_t               char_disc_rsp;              /**< Characteristic Discovery Response Event Parameters. */
        ble_gattc_evt_desc_disc_rsp_t               desc_disc_rsp;              /**< Descriptor Discovery Response Event Parameters. */
        ble_gattc_evt_char_val_by_uuid_read_rsp_t   char_val_by_uuid_read_rsp;  /**< Characteristic Value Read by UUID Response Event Parameters. */
        ble_gattc_evt_read_rsp_t                    read_rsp;                   /**< Read Response Event Parameters. */
        ble_gattc_evt_char_vals_read_rsp_t          char_vals_read_rsp;         /**< Characteristic Values Read Response Event Parameters. */
        ble_gattc_evt_write_rsp_t                   write_rsp;                  /**< Write Response Event Parameters. */
        ble_gattc_evt_hvx_t                         hvx;                        /**< Handle Value Notification/Indication Event Parameters. */
        ble_gattc_evt_timeout_t                     timeout;                    /**< Timeout Event Parameters. */
        ble_gattc_evt_attr_info_disc_rsp_t          attr_info_disc_rsp;         /**< Attribute Information Discovery Event Parameters. */
      } params;                                                                 /**< Event Parameters. @note Only valid if @ref gatt_status == @ref BLE_GATT_STATUS_SUCCESS. */
    } ble_gattc_evt_t;

    // ble_l2cap.h
    // Forward declaration of structs
    typedef struct ble_l2cap_evt_ch_setup_request_t ble_l2cap_evt_ch_setup_request_t;
    typedef struct ble_l2cap_evt_ch_setup_refused_t ble_l2cap_evt_ch_setup_refused_t;
    typedef struct ble_l2cap_evt_ch_setup_t ble_l2cap_evt_ch_setup_t;
    typedef struct ble_l2cap_evt_ch_sdu_buf_released_t ble_l2cap_evt_ch_sdu_buf_released_t;
    typedef struct ble_l2cap_evt_ch_credit_t ble_l2cap_evt_ch_credit_t;
    typedef struct ble_l2cap_evt_ch_rx_t ble_l2cap_evt_ch_rx_t;
    typedef struct ble_l2cap_evt_ch_tx_t ble_l2cap_evt_ch_tx_t;

    // From ble_l2cap.h
    typedef struct
    {
      uint16_t conn_handle;                                     /**< Connection Handle on which the event occured. */
      uint16_t local_cid;                                       /**< Local Channel ID of the L2CAP channel, or
                                                                     @ref BLE_L2CAP_CID_INVALID if not present. */
      union
      {
        ble_l2cap_evt_ch_setup_request_t    ch_setup_request;   /**< L2CAP Channel Setup Request Event Parameters. */
        ble_l2cap_evt_ch_setup_refused_t    ch_setup_refused;   /**< L2CAP Channel Setup Refused Event Parameters. */
        ble_l2cap_evt_ch_setup_t            ch_setup;           /**< L2CAP Channel Setup Completed Event Parameters. */
        ble_l2cap_evt_ch_sdu_buf_released_t ch_sdu_buf_released;/**< L2CAP Channel SDU Data Buffer Released Event Parameters. */
        ble_l2cap_evt_ch_credit_t           credit;             /**< L2CAP Channel Credit Received Event Parameters. */
        ble_l2cap_evt_ch_rx_t               rx;                 /**< L2CAP Channel SDU Received Event Parameters. */
        ble_l2cap_evt_ch_tx_t               tx;                 /**< L2CAP Channel SDU Transmitted Event Parameters. */
      } params;                                                 /**< Event Parameters. */
    } ble_l2cap_evt_t;

#endif // NRF_SD_BLE_API_VERSION == 5

#if NRF_SD_BLE_API_VERSION == 2
    // SoftDevice V2

    // ble.h
    // Forward declaration of structs
    typedef ble_evt_tx_complete_t ble_evt_tx_complete_t;
    typedef ble_evt_user_mem_request_t ble_evt_user_mem_request_t;
    typedef ble_evt_user_mem_release_t ble_evt_user_mem_release_t;

    // From ble.h
    typedef struct
    {
      uint16_t conn_handle;                 /**< Connection Handle on which this event occurred. */
      union
      {
        ble_evt_tx_complete_t           tx_complete;        /**< Transmission Complete. */
        ble_evt_user_mem_request_t      user_mem_request;   /**< User Memory Request Event Parameters. */
        ble_evt_user_mem_release_t      user_mem_release;   /**< User Memory Release Event Parameters. */
      } params;
    } ble_common_evt_t;

    // ble_gap.h
    // Forward declaration of structs
    typedef struct ble_gap_evt_connected_t ble_gap_evt_connected_t;
    typedef struct ble_gap_evt_disconnected_t ble_gap_evt_disconnected_t;
    typedef struct ble_gap_evt_conn_param_update_t ble_gap_evt_conn_param_update_t;
    typedef struct ble_gap_evt_sec_params_request_t ble_gap_evt_sec_params_request_t;
    typedef struct ble_gap_evt_sec_info_request_t ble_gap_evt_sec_info_request_t;
    typedef struct ble_gap_evt_passkey_display_t ble_gap_evt_passkey_display_t;
    typedef struct ble_gap_evt_key_pressed_t ble_gap_evt_key_pressed_t;
    typedef struct ble_gap_evt_auth_key_request_t ble_gap_evt_auth_key_request_t;
    typedef struct ble_gap_evt_lesc_dhkey_request_t ble_gap_evt_lesc_dhkey_request_t;
    typedef struct ble_gap_evt_auth_status_t ble_gap_evt_auth_status_t;
    typedef struct ble_gap_evt_conn_sec_update_t ble_gap_evt_conn_sec_update_t;
    typedef struct ble_gap_evt_timeout_t ble_gap_evt_timeout_t;
    typedef struct ble_gap_evt_rssi_changed_t ble_gap_evt_rssi_changed_t;
    typedef struct ble_gap_evt_adv_report_t ble_gap_evt_adv_report_t;
    typedef struct ble_gap_evt_sec_request_t ble_gap_evt_sec_request_t;
    typedef struct ble_gap_evt_conn_param_update_request_t ble_gap_evt_conn_param_update_request_t;
    typedef struct ble_gap_evt_scan_req_report_t ble_gap_evt_scan_req_report_t;

    // From ble_gap.h
    typedef struct
    {
      uint16_t conn_handle;                                     /**< Connection Handle on which event occurred. */
      union                                /**< union alternative identified by evt_id in enclosing struct. */
      {
        ble_gap_evt_connected_t                   connected;                    /**< Connected Event Parameters. */
        ble_gap_evt_disconnected_t                disconnected;                 /**< Disconnected Event Parameters. */
        ble_gap_evt_conn_param_update_t           conn_param_update;            /**< Connection Parameter Update Parameters. */
        ble_gap_evt_sec_params_request_t          sec_params_request;           /**< Security Parameters Request Event Parameters. */
        ble_gap_evt_sec_info_request_t            sec_info_request;             /**< Security Information Request Event Parameters. */
        ble_gap_evt_passkey_display_t             passkey_display;              /**< Passkey Display Event Parameters. */
        ble_gap_evt_key_pressed_t                 key_pressed;                  /**< Key Pressed Event Parameters. */
        ble_gap_evt_auth_key_request_t            auth_key_request;             /**< Authentication Key Request Event Parameters. */
        ble_gap_evt_lesc_dhkey_request_t          lesc_dhkey_request;           /**< LE Secure Connections DHKey calculation request. */
        ble_gap_evt_auth_status_t                 auth_status;                  /**< Authentication Status Event Parameters. */
        ble_gap_evt_conn_sec_update_t             conn_sec_update;              /**< Connection Security Update Event Parameters. */
        ble_gap_evt_timeout_t                     timeout;                      /**< Timeout Event Parameters. */
        ble_gap_evt_rssi_changed_t                rssi_changed;                 /**< RSSI Event parameters. */
        ble_gap_evt_adv_report_t                  adv_report;                   /**< Advertising Report Event Parameters. */
        ble_gap_evt_sec_request_t                 sec_request;                  /**< Security Request Event Parameters. */
        ble_gap_evt_conn_param_update_request_t   conn_param_update_request;    /**< Connection Parameter Update Parameters. */
        ble_gap_evt_scan_req_report_t             scan_req_report;              /**< Scan Request Report parameters. */
      } params;                                                                 /**< Event Parameters. */
    } ble_gap_evt_t;

    // ble_gatts.h
    // Forward declaration of structs
    typedef struct ble_gatts_evt_write_t ble_gatts_evt_write_t;
    typedef struct ble_gatts_evt_rw_authorize_request_t ble_gatts_evt_rw_authorize_request_t;
    typedef struct ble_gatts_evt_sys_attr_missing_t ble_gatts_evt_sys_attr_missing_t;
    typedef struct ble_gatts_evt_hvc_t ble_gatts_evt_hvc_t;
    typedef struct ble_gatts_evt_timeout_t ble_gatts_evt_timeout_t;
    typedef struct ble_gatts_authorize_params_t ble_gatts_authorize_params_t;

    // From ble_gatts.h
    typedef struct
    {
      uint8_t                               type;   /**< Type of authorize operation, see @ref BLE_GATTS_AUTHORIZE_TYPES. */
      union
      {
        ble_gatts_authorize_params_t        read;   /**< Read authorization parameters. */
        ble_gatts_authorize_params_t        write;  /**< Write authorization parameters. */
      } params;                                     /**< Reply Parameters. */
    } ble_gatts_rw_authorize_reply_params_t;

    typedef struct
    {
      uint16_t conn_handle;                                       /**< Connection Handle on which the event occurred. */
      union
      {
        ble_gatts_evt_write_t                 write;              /**< Write Event Parameters. */
        ble_gatts_evt_rw_authorize_request_t  authorize_request;  /**< Read or Write Authorize Request Parameters. */
        ble_gatts_evt_sys_attr_missing_t      sys_attr_missing;   /**< System attributes missing. */
        ble_gatts_evt_hvc_t                   hvc;                /**< Handle Value Confirmation Event Parameters. */
        ble_gatts_evt_timeout_t               timeout;            /**< Timeout Event. */
      } params;                                                   /**< Event Parameters. */
    } ble_gatts_evt_t;

    // ble_gattc.h
    // Forward declaration of structs
    typedef struct ble_gattc_evt_prim_srvc_disc_rsp_t ble_gattc_evt_prim_srvc_disc_rsp_t;
    typedef struct ble_gattc_evt_rel_disc_rsp_t ble_gattc_evt_rel_disc_rsp_t;
    typedef struct ble_gattc_evt_char_disc_rsp_t ble_gattc_evt_char_disc_rsp_t;
    typedef struct ble_gattc_evt_desc_disc_rsp_t ble_gattc_evt_desc_disc_rsp_t;
    typedef struct ble_gattc_evt_char_val_by_uuid_read_rsp_t ble_gattc_evt_char_val_by_uuid_read_rsp_t;
    typedef struct ble_gattc_evt_read_rsp_t ble_gattc_evt_read_rsp_t;
    typedef struct ble_gattc_evt_char_vals_read_rsp_t ble_gattc_evt_char_vals_read_rsp_t;
    typedef struct ble_gattc_evt_write_rsp_t ble_gattc_evt_write_rsp_t;
    typedef struct ble_gattc_evt_hvx_t ble_gattc_evt_hvx_t;
    typedef struct ble_gattc_evt_timeout_t ble_gattc_evt_timeout_t;
    typedef struct ble_gattc_evt_attr_info_disc_rsp_t ble_gattc_evt_attr_info_disc_rsp_t;

    // From ble_gattc.h
    typedef struct
    {
      uint16_t            conn_handle;                /**< Connection Handle on which event occured. */
      uint16_t            gatt_status;                /**< GATT status code for the operation, see @ref BLE_GATT_STATUS_CODES. */
      uint16_t            error_handle;               /**< In case of error: The handle causing the error. In all other cases @ref BLE_GATT_HANDLE_INVALID. */
      union
      {
        ble_gattc_evt_prim_srvc_disc_rsp_t          prim_srvc_disc_rsp;         /**< Primary Service Discovery Response Event Parameters. */
        ble_gattc_evt_rel_disc_rsp_t                rel_disc_rsp;               /**< Relationship Discovery Response Event Parameters. */
        ble_gattc_evt_char_disc_rsp_t               char_disc_rsp;              /**< Characteristic Discovery Response Event Parameters. */
        ble_gattc_evt_desc_disc_rsp_t               desc_disc_rsp;              /**< Descriptor Discovery Response Event Parameters. */
        ble_gattc_evt_char_val_by_uuid_read_rsp_t   char_val_by_uuid_read_rsp;  /**< Characteristic Value Read by UUID Response Event Parameters. */
        ble_gattc_evt_read_rsp_t                    read_rsp;                   /**< Read Response Event Parameters. */
        ble_gattc_evt_char_vals_read_rsp_t          char_vals_read_rsp;         /**< Characteristic Values Read Response Event Parameters. */
        ble_gattc_evt_write_rsp_t                   write_rsp;                  /**< Write Response Event Parameters. */
        ble_gattc_evt_hvx_t                         hvx;                        /**< Handle Value Notification/Indication Event Parameters. */
        ble_gattc_evt_timeout_t                     timeout;                    /**< Timeout Event Parameters. */
        ble_gattc_evt_attr_info_disc_rsp_t          attr_info_disc_rsp;         /**< Attribute Information Discovery Event Parameters. */
      } params;                                                                 /**< Event Parameters. @note Only valid if @ref gatt_status == @ref BLE_GATT_STATUS_SUCCESS. */
    } ble_gattc_evt_t;

    // ble_l2cap.h
    // Forward declaration of structs
    typedef struct ble_l2cap_evt_rx_t ble_l2cap_evt_rx_t;

    // From ble_l2cap.h
    typedef struct
    {
      uint16_t conn_handle;                           /**< Connection Handle on which event occured. */
      union
      {
        ble_l2cap_evt_rx_t rx;                        /**< RX Event parameters. */
      } params;                                       /**< Event Parameters. */
    } ble_l2cap_evt_t;
#endif // NRF_SD_BLE_API_VERSION == 2

%}

// Grab the definitions
%include "config/platform.h"
%define SVCALL(number, return_type, signature) return_type signature
%enddef
%include "adapter.h"
%include "ble.h"
%include "ble_err.h"
%include "ble_gap.h"
%include "ble_gatt.h"
%include "ble_gatts.h"
%include "ble_gattc.h"
%include "ble_hci.h"
%include "ble_l2cap.h"
%include "ble_ranges.h"
%include "ble_types.h"
%include "nrf_error.h"
%include "sd_rpc.h"
%include "sd_rpc_types.h"

%pointer_functions(uint8_t, uint8);
%pointer_functions(uint16_t, uint16);
%pointer_functions(uint32_t, uint32);

%array_class(char, char_array);
%array_class(uint8_t, uint8_array);
%array_class(uint16_t, uint16_array);
%array_class(ble_gattc_service_t, ble_gattc_service_array);
%array_class(ble_gattc_include_t, ble_gattc_include_array);
%array_class(ble_gattc_char_t, ble_gattc_char_array);
%array_class(ble_gattc_desc_t, ble_gattc_desc_array);
#if NRF_SD_BLE_API_VERSION == 2
%array_class(ble_gattc_attr_info_t, ble_gattc_attr_info_array);
#endif
#if NRF_SD_BLE_API_VERSION >= 3
%array_class(ble_gattc_attr_info16_t, ble_gattc_attr_info16_array);
%array_class(ble_gattc_attr_info128_t, ble_gattc_attr_info128_array);
#endif
%array_class(ble_gattc_handle_value_t, ble_gattc_handle_value_array);
%array_class(sd_rpc_serial_port_desc_t, sd_rpc_serial_port_desc_array);
#if NRF_SD_BLE_API_VERSION >= 5
%pointer_functions(ble_gap_data_length_limitation_t, ble_gap_data_length_limitation);
#endif
// Grab a Python function object as a Python object.
%typemap(in) PyObject *pyfunc {
    if (!PyCallable_Check($input)) {
        PyErr_SetString(PyExc_TypeError, "Need a callable object!");
        return NULL;
    }
    $1 = $input;
}
%rename(sd_rpc_open) sd_rpc_open_py;
extern PyObject* sd_rpc_open_py(PyObject *adapter, PyObject *py_status_handler, PyObject *py_evt_handler, PyObject *py_log_handler);

/* Event callback handling */
%{
static PyObject *my_pyevtcallback = NULL;

static void PythonEvtCallBack(adapter_t *adapter, ble_evt_t *ble_event)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *adapter_obj;
    PyObject *ble_evt_obj;
    PyGILState_STATE gstate;
    ble_evt_t* copied_ble_event;

#if DEBUG
    unsigned long int tr;
    tr = (unsigned long int)pthread_self();
    printf("XXXX-XX-XX XX:XX:XX,XXX BIND tid:0x%lX\n", tr);
#endif // DEBUG

    if(my_pyevtcallback == NULL) {
        printf("Callback not set, returning\n");
        return;
    }

    func = my_pyevtcallback;

#if DEBUG
    printf("sizeof(ble_evt_t): %ld\n", sizeof(ble_evt_t));
    printf("ble_event->header.evt_len: %d\n", ble_event->header.evt_len);
    printf("ble_event->header.evt_id: %X\n", ble_event->header.evt_id);
    printf("sizeof(ble_evt_hdr_t): %ld\n", sizeof(ble_evt_hdr_t));
#endif // DEBUG

    // Do a copy of the event so that the Python developer is able to access the event after
    // this callback is complete. The event that is received in this function is allocated
    // on the stack of the function calling this function.

#if SD_BLE_API_VERSION == 2
    copied_ble_event = (ble_evt_t*)malloc(sizeof(ble_evt_t));
    memcpy(copied_ble_event, ble_event, sizeof(ble_evt_t));
#else
    copied_ble_event = (ble_evt_t*)malloc(ble_event->header.evt_len);
    memcpy(copied_ble_event, ble_event, ble_event->header.evt_len);
#endif

    // Handling of Python Global Interpretor Lock (GIL)
    gstate = PyGILState_Ensure();

    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    // Create a Python object that points to the copied event, let the interpreter take care of
    // memory management of the copied event by setting the SWIG_POINTER_OWN flag.
    ble_evt_obj = SWIG_NewPointerObj(SWIG_as_voidptr(copied_ble_event), SWIGTYPE_p_ble_evt_t, SWIG_POINTER_OWN);
    arglist = Py_BuildValue("(OO)", adapter_obj, ble_evt_obj);

    PyEval_CallObject(func, arglist);

    Py_XDECREF(adapter_obj);
    Py_XDECREF(ble_evt_obj);
    Py_DECREF(arglist);

    PyGILState_Release(gstate);
}
%}

/* Status callback handling */
%{
static PyObject *my_pystatuscallback = NULL;

static void PythonStatusCallBack(adapter_t *adapter, sd_rpc_app_status_t status_code, const char * status_message)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *result;
    PyObject *adapter_obj;
    PyObject *status_code_obj;
    PyObject *status_message_obj;
    PyGILState_STATE gstate;

    func = my_pystatuscallback;

    if(my_pystatuscallback == NULL) {
        printf("Callback not set, returning\n");
        return;
    }

    // For information regarding GIL and copying of data, please look at
    // function PythonEvtCallBack.

#if DEBUG
    unsigned long int tr;
    tr = (unsigned long int)pthread_self();
    printf("XXXX-XX-XX XX:XX:XX,XXX BIND tid:0x%lX\n", tr);
#endif // DEBUG

    gstate = PyGILState_Ensure();

    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    status_code_obj = SWIG_From_int((int)(status_code));

    // SWIG_Python_str_FromChar boils down to PyString_FromString which does a copy of log_message string
    status_message_obj = SWIG_Python_str_FromChar((const char *)status_message);
    arglist = Py_BuildValue("(OOO)", adapter_obj, status_code_obj, status_message_obj);

    result = PyEval_CallObject(func, arglist);

    Py_XDECREF(adapter_obj);
    Py_XDECREF(status_code_obj);
    Py_XDECREF(status_message_obj);
    Py_DECREF(arglist);
    Py_XDECREF(result);

    PyGILState_Release(gstate);
}
%}

/* Log callback handling */
%{
static PyObject *my_pylogcallback = NULL;

static void PythonLogCallBack(adapter_t *adapter, sd_rpc_log_severity_t severity, const char * log_message)
{
    PyObject *func;
    PyObject *arglist;
    PyObject *result;
    PyObject *adapter_obj;
    PyObject *severity_obj;
    PyObject *message_obj;
    PyGILState_STATE gstate;

    func = my_pylogcallback;

    if(my_pylogcallback == NULL) {
        printf("Callback not set, returning\n");
        return;
    }

    // For information regarding GIL and copying of data, please look at
    // function PythonEvtCallBack.

#if DEBUG
    unsigned long int tr;
    tr = (unsigned long int)pthread_self();
    printf("XXXX-XX-XX XX:XX:XX,XXX BIND tid:0x%lX\n", tr);
#endif // DEBUG

    gstate = PyGILState_Ensure();

    adapter_obj = SWIG_NewPointerObj(SWIG_as_voidptr(adapter), SWIGTYPE_p_adapter_t, 0 |  0 );
    severity_obj = SWIG_From_int((int)(severity));

    // SWIG_Python_str_FromChar boils down to PyString_FromString which does a copy of log_message string
    message_obj = SWIG_Python_str_FromChar((const char *)log_message);
    arglist = Py_BuildValue("(OOO)", adapter_obj, severity_obj, message_obj);

    result = PyEval_CallObject(func, arglist);

    Py_XDECREF(adapter_obj);
    Py_XDECREF(message_obj);
    Py_XDECREF(severity_obj);
    Py_DECREF(arglist);
    Py_XDECREF(result);

    PyGILState_Release(gstate);
}
%}

%{
// Open the RPC and set Python function objects as a callback functions
PyObject* sd_rpc_open_py(PyObject *adapter, PyObject *py_status_handler, PyObject *py_evt_handler, PyObject *py_log_handler)
{

    PyObject *resultobj = 0;
    adapter_t *arg1 = (adapter_t *) 0;
    void *argp1 = 0 ;
    int res1 = 0 ;
    uint32_t result;
 
    res1 = SWIG_ConvertPtr(adapter, &argp1,SWIGTYPE_p_adapter_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sd_rpc_open" "', argument " "1"" of type '" "adapter_t *""'"); 
    }

    arg1 = (adapter_t * ) (argp1);

    Py_XDECREF(my_pystatuscallback);  /* Remove any existing callback object */
    Py_XDECREF(my_pyevtcallback);  /* Remove any existing callback object */
    Py_XDECREF(my_pylogcallback); /* Remove any existing callback object */
    Py_XINCREF(py_status_handler);
    Py_XINCREF(py_evt_handler);
    Py_XINCREF(py_log_handler);
    my_pystatuscallback = py_status_handler;
    my_pyevtcallback = py_evt_handler;
    my_pylogcallback = py_log_handler;
    
    result = sd_rpc_open(arg1, PythonStatusCallBack, PythonEvtCallBack, PythonLogCallBack);
    resultobj = SWIG_From_unsigned_SS_int((unsigned int) (result));
    return resultobj;

fail:
    return NULL;
}
%}

