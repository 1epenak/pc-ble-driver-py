trigger:
- test-azure

jobs:
  - job: Build
    variables:
      npm_config_runtime: ''
      npm_config_target: ''
      npm_config_disturl: ''
    strategy:
      matrix:
        linux_python_27:
          image_name: 'ubuntu-16.04'
          python_version: 2.7
          python_arch: 'x64'
          triplet: 'x64-linux'
        linux_python_35:
          image_name: 'ubuntu-16.04'
          python_version: 3.5
          python_arch: 'x64'
          triplet: 'x64-linux'
        linux_python_36:
          image_name: 'ubuntu-16.04'
          python_version: 3.6
          python_arch: 'x64'
          triplet: 'x64-linux'
        linux_python_37:
          image_name: 'ubuntu-16.04'
          python_version: 3.7
          python_arch: 'x64'
          triplet: 'x64-linux'
        mac_python_37:
          image_name: 'macos-10.13'
          python_version: 3.6
          python_arch: 'x64'
          triplet: 'x64-osx'
        win64_python_37:
          image_name: 'vs2017-win2016'
          python_version: 3.6
          python_arch: 'x64'
          triplet: 'x64-windows'
        win32_python_37:
          image_name: 'vs2017-win2016'
          python_version: 3.6
          python_arch: 'x86'
          triplet: 'x86-windows'
    pool:
      vmImage: $(image_name)
    steps:
    # Install toolchain
    - script: |
        # sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install ninja-build
        sudo apt-get install swig
        sudo apt-get install libudev-dev
        # sudo apt-get install python$(python_version)-dev
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install toolchain on Linux'
    # Install python
    - bash: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $(Agent.HomeDirectory)/miniconda.sh
        bash $(Agent.HomeDirectory)/miniconda.sh -b -p $(Agent.HomeDirectory)/miniconda
        $(Agent.HomeDirectory)/miniconda/bin/conda create -yq -n python$(python_version) python=$(python_version)
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install Python $(python_version)'
    # Install vcpkg
    - script: |
        git clone https://github.com/NordicPlayground/vcpkg.git $(Agent.HomeDirectory)/vcpkg
        $(Agent.HomeDirectory)/vcpkg/bootstrap-vcpkg.sh
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install vcpkg for Linux'
    # Install nrf-ble-driver
    - script: |
        export PATH=$(Agent.HomeDirectory)/vcpkg:$PATH
        vcpkg install nrf-ble-driver:$(triplet)
      env: {
        VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg',
      }
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install nrf-ble-driver for Linux'
    # Build
    - script: |
        export PATH=$(Agent.HomeDirectory)/miniconda/envs/python$(python_version)/bin:$PATH
        export PYTHON_VERSION=$(python_version)
        pip install -r requirements-dev.txt
        python$(python_version) setup.py bdist_wheel --build-type Debug
      env: {
        VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg',
      }
      condition: contains(variables['image_name'], 'ubuntu')

    # - script: |
    #     brew install gcc
    #     brew install swig
    #   condition: contains(variables['image_name'], 'mac')
    #   displayName: 'Install toolchain on macOS'
    # - script: |
    #     choco install -y --x86 swig
    #   condition: contains(variables['image_name'], 'win')
    #   displayName: 'Install toolchain on Windows'

    # # Install nrf-ble-driver
    # - script: |
    #     git clone https://github.com/NordicPlayground/vcpkg.git $(Agent.HomeDirectory)/vcpkg
    #     $(Agent.HomeDirectory)/vcpkg/bootstrap-vcpkg.sh
    #   condition: not(contains(variables['image_name'], 'win'))
    #   displayName: 'Install nrf-ble-driver for Linux or macOS'
    # - script: |
    #     export PATH=$VCPKG_ROOT:$PATH
    #     echo $PATH
    #     echo $VCPKG_ROOT
    #     vcpkg install nrf-ble-driver:$(triplet)
    #   condition: not(contains(variables['image_name'], 'win'))
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg',
    #   }
    #   displayName: 'Install nrf-ble-driver for Linux or macOS'
    # - script: |
    #     git clone https://github.com/NordicPlayground/vcpkg.git $(Agent.HomeDirectory)/vcpkg
    #     $(Agent.HomeDirectory)\vcpkg\bootstrap-vcpkg.bat
    #   condition: contains(variables['image_name'], 'win')
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)\vcpkg',
    #   }
    #   displayName: 'Install nrf-ble-driver for Windows'
    # - script: |
    #     set PATH=%VCPKG_ROOT%;%PATH%
    #     echo %PATH%
    #     echo %VCPKG_ROOT%
    #     vcpkg install nrf-ble-driver:$(triplet)
    #   condition: contains(variables['image_name'], 'win')
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)\vcpkg',
    #   }
    #   displayName: 'Install nrf-ble-driver for Windows'

    # Build
    # - script: |
    #     export PATH=$VCPKG_ROOT:$PATH
    #     echo $PATH
    #     echo $VCPKG_ROOT
    #     vcpkg list
    #     python -V
    #     p_v=`which python`
    #     p_d=`dirname $p_v`
    #     echo ls p_d
    #     ls $p_d
    #     echo ls p_d/bin
    #     ls $p_d/bin
    #     python-config --includes
    #     pip install -r requirements-dev.txt
    #     python setup.py bdist_wheel --build-type Debug
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg',
    #   }
    #   condition: contains(variables['image_name'], 'ubuntu')
    #   displayName: 'Build'
    # - script: |
    #     export PATH=$VCPKG_ROOT:$PATH
    #     echo $PATH
    #     echo $VCPKG_ROOT
    #     vcpkg list
    #     python -V
    #     pip install -r requirements-dev.txt
    #     python setup.py bdist_wheel --build-type Debug
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg',
    #   }
    #   condition: contains(variables['image_name'], 'mac')
    #   displayName: 'Build'
    # - script: |
    #     set PATH=%VCPKG_ROOT%;%PATH%
    #     echo %PATH%
    #     echo %VCPKG_ROOT%
    #     vcpkg list
    #     python -V
    #     pip install -r requirements-dev.txt
    #     python setup.py bdist_wheel --build-type Debug
    #   env: {
    #     VCPKG_ROOT: '$(Agent.HomeDirectory)\vcpkg',
    #   }
    #   condition: contains(variables['image_name'], 'win')
    #   displayName: 'Build'
    # - bash: |
    #     cp -R build/stage/**/*.tar.gz "$(Build.ArtifactStagingDirectory)"
    #   displayName: 'Copy artifacts'
    # - task: GitHubRelease@0
    #   inputs:
    #     gitHubConnection: 'waylandCI'
    #     repositoryName: 'NordicSemiconductor/pc-nrfjprog-js'
    #     action: 'edit'
    #     tagSource: 'Git tag'
    #     tag: '$(Build.SourceBranchName)'
    #     assetUploadMode: 'replace'
    #     isDraft: 'true'
    #     addChangeLog: 'false'
    #   condition: ne(variables['Build.Reason'], 'PullRequest')

  # - job: Test
  #   dependsOn: [
  #     Build,
  #   ]
  #   strategy:
  #     matrix:
  #       linux:
  #         osType: 'linux'
  #       mac:
  #         osType: 'mac'
  #       win64:
  #         osType: 'win64'
  #       win32:
  #         osType: 'win32'
  #   pool: server
  #   steps:
  #   - task: InvokeRESTAPI@1
  #     displayName: Test
  #     inputs:
  #       connectionType: 'connectedServiceName'
  #       serviceConnection: 'waylandJenkins'
  #       method: 'POST'
  #       urlSuffix: 'view/pc-nrfjprog-js/job/pc-nrfjprog-js-$(osType)/buildWithParameters?BRANCH=$(Build.SourceBranch)&VSTS_URL=$(system.CollectionUri)&TOKEN=$(system.AccessToken)&PROJECT_ID=$(system.teamProjectId)&HUB_NAME=$(system.hostType)&PLAN_ID=$(system.planId)&TASK_ID=$(system.taskInstanceId)&JOB_ID=$(system.jobId)'
  #       waitForCompletion: 'true'
  #     condition: ne(variables['Build.Reason'], 'PullRequest')
